version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: rigger-postgres-prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-rigger_platform}
      POSTGRES_USER: ${POSTGRES_USER:-rigger_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-rigger_user} -d ${POSTGRES_DB:-rigger_platform}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - rigger-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: rigger-redis-prod
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - rigger-network
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}

  # API Service
  api:
    build:
      context: .
      dockerfile: ./apps/api/Dockerfile
    container_name: rigger-api-prod
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER:-rigger_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-rigger_platform}
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
      - CORS_ORIGIN=${CORS_ORIGIN}
      - PORT=3001
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - rigger-network

  # Web Dashboard
  web:
    build:
      context: .
      dockerfile: ./apps/web/Dockerfile
    container_name: rigger-web-prod
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=${API_URL:-http://localhost:3001}
      - PORT=3000
    ports:
      - "3000:3000"
    depends_on:
      api:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - rigger-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: rigger-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/nginx/nginx.prod.conf:/etc/nginx/nginx.conf
      - ./infrastructure/nginx/ssl:/etc/nginx/ssl
      - /var/log/nginx:/var/log/nginx
    depends_on:
      - web
      - api
    restart: unless-stopped
    networks:
      - rigger-network

  # Database Backup Service
  backup:
    image: postgres:15-alpine
    container_name: rigger-backup-prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-rigger_platform}
      POSTGRES_USER: ${POSTGRES_USER:-rigger_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - ./backups:/backups
      - ./scripts:/scripts
    depends_on:
      - postgres
    restart: "no"
    networks:
      - rigger-network
    command: >
      sh -c "
        while true; do
          echo 'Starting backup at $(date)'
          pg_dump -h postgres -U ${POSTGRES_USER:-rigger_user} -d ${POSTGRES_DB:-rigger_platform} > /backups/backup_$(date +%Y%m%d_%H%M%S).sql
          find /backups -name '*.sql' -mtime +${BACKUP_RETENTION_DAYS:-30} -delete
          echo 'Backup completed at $(date)'
          sleep 86400
        done
      "

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  rigger-network:
    driver: bridge