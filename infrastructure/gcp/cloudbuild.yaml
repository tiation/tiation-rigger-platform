# Cloud Build configuration for Rigger Platform
# This file defines the CI/CD pipeline for Google Cloud Platform

steps:
  # Install dependencies and build shared packages
  - name: 'node:18'
    entrypoint: 'npm'
    args: ['ci']
    id: 'install-deps'

  - name: 'node:18'
    entrypoint: 'npm'
    args: ['run', 'build', '--workspace=packages/shared']
    id: 'build-shared'
    waitFor: ['install-deps']

  # Run tests
  - name: 'node:18'
    entrypoint: 'npm'
    args: ['test']
    id: 'run-tests'
    waitFor: ['build-shared']

  # Build API Docker image
  - name: 'gcr.io/cloud-builders/docker'
    args: [
      'build',
      '-t', 'gcr.io/$PROJECT_ID/rigger-platform-api:$COMMIT_SHA',
      '-t', 'gcr.io/$PROJECT_ID/rigger-platform-api:latest',
      '-f', 'apps/api/Dockerfile.gcp',
      '.'
    ]
    id: 'build-api'
    waitFor: ['run-tests']

  # Build Web Docker image
  - name: 'gcr.io/cloud-builders/docker'
    args: [
      'build',
      '-t', 'gcr.io/$PROJECT_ID/rigger-platform-web:$COMMIT_SHA',
      '-t', 'gcr.io/$PROJECT_ID/rigger-platform-web:latest',
      '-f', 'apps/web/Dockerfile.gcp',
      '.'
    ]
    id: 'build-web'
    waitFor: ['run-tests']

  # Push images to Container Registry
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/rigger-platform-api:$COMMIT_SHA']
    id: 'push-api'
    waitFor: ['build-api']

  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/rigger-platform-web:$COMMIT_SHA']
    id: 'push-web'
    waitFor: ['build-web']

  # Deploy API to Cloud Run
  - name: 'gcr.io/cloud-builders/gcloud'
    args: [
      'run', 'deploy', 'rigger-platform-api',
      '--image', 'gcr.io/$PROJECT_ID/rigger-platform-api:$COMMIT_SHA',
      '--region', 'us-central1',
      '--platform', 'managed',
      '--allow-unauthenticated',
      '--memory', '1Gi',
      '--cpu', '1',
      '--concurrency', '100',
      '--max-instances', '10',
      '--min-instances', '1',
      '--port', '3001',
      '--set-env-vars', 'NODE_ENV=production',
      '--set-cloudsql-instances', '$PROJECT_ID:us-central1:rigger-platform-db',
      '--vpc-connector', 'rigger-platform-connector'
    ]
    id: 'deploy-api'
    waitFor: ['push-api']

  # Deploy Web to Cloud Run
  - name: 'gcr.io/cloud-builders/gcloud'
    args: [
      'run', 'deploy', 'rigger-platform-web',
      '--image', 'gcr.io/$PROJECT_ID/rigger-platform-web:$COMMIT_SHA',
      '--region', 'us-central1',
      '--platform', 'managed',
      '--allow-unauthenticated',
      '--memory', '512Mi',
      '--cpu', '1',
      '--concurrency', '100',
      '--max-instances', '5',
      '--min-instances', '0',
      '--port', '3000'
    ]
    id: 'deploy-web'
    waitFor: ['push-web', 'deploy-api']

  # Run database migrations
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Get API service URL
        API_URL=$$(gcloud run services describe rigger-platform-api --region=us-central1 --format='value(status.url)')
        
        # Trigger database migration via API endpoint
        curl -X POST "$$API_URL/api/admin/migrate" \
          -H "Authorization: Bearer ${_MIGRATION_TOKEN}" \
          -H "Content-Type: application/json"
    id: 'run-migrations'
    waitFor: ['deploy-api']

# Build options
options:
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_HIGHCPU_8'

# Build timeout
timeout: '1200s'

# Substitutions for environment-specific builds
substitutions:
  _MIGRATION_TOKEN: 'your-migration-token'

# Images to store in Container Registry
images:
  - 'gcr.io/$PROJECT_ID/rigger-platform-api:$COMMIT_SHA'
  - 'gcr.io/$PROJECT_ID/rigger-platform-web:$COMMIT_SHA'