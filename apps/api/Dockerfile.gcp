# Multi-stage build for Google Cloud Platform
FROM node:18-alpine AS base

# Install dependencies
FROM base AS deps
RUN apk add --no-cache libc6-compat
WORKDIR /app

# Copy package files
COPY package*.json ./
COPY apps/api/package*.json ./apps/api/
COPY packages/shared/package*.json ./packages/shared/

# Install all dependencies
RUN npm ci

# Build stage
FROM base AS builder
WORKDIR /app

COPY . .
COPY --from=deps /app/node_modules ./node_modules

# Build shared packages
RUN npm run build --workspace=packages/shared

# Generate Prisma client
WORKDIR /app/apps/api
RUN npx prisma generate

# Build API
WORKDIR /app
RUN npm run build --workspace=apps/api

# Production stage
FROM base AS runner
WORKDIR /app

# Create non-root user
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 rigger-api

# Copy built application
COPY --from=builder --chown=rigger-api:nodejs /app/apps/api/dist ./dist
COPY --from=builder --chown=rigger-api:nodejs /app/apps/api/prisma ./prisma
COPY --from=builder --chown=rigger-api:nodejs /app/apps/api/package*.json ./
COPY --from=builder --chown=rigger-api:nodejs /app/node_modules ./node_modules
COPY --from=builder --chown=rigger-api:nodejs /app/packages/shared/dist ./packages/shared/dist

# Create necessary directories
RUN mkdir -p logs uploads && chown -R rigger-api:nodejs logs uploads

# Environment variables
ENV NODE_ENV=production
ENV PORT=3001

# Switch to non-root user
USER rigger-api

# Expose port
EXPOSE 3001

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD node -e "require('http').get('http://localhost:3001/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"

# Start application
CMD ["node", "dist/server.js"]