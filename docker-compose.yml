version: '3.8'

services:
  # Database
  postgres:
    image: postgres:15-alpine
    container_name: rigger-postgres
    environment:
      POSTGRES_DB: rigger_platform
      POSTGRES_USER: rigger_user
      POSTGRES_PASSWORD: rigger_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U rigger_user -d rigger_platform"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: rigger-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # API Service
  api:
    build:
      context: .
      dockerfile: ./apps/api/Dockerfile
    container_name: rigger-api
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://rigger_user:rigger_password@postgres:5432/rigger_platform
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-jwt-secret-key-change-in-production
      - PORT=3001
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./uploads:/app/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Web Dashboard
  web:
    build:
      context: .
      dockerfile: ./apps/web/Dockerfile
    container_name: rigger-web
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://api:3001
      - PORT=3000
    ports:
      - "3000:3000"
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: rigger-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./infrastructure/docker/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - web
      - api
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  default:
    name: rigger-platform
    driver: bridge